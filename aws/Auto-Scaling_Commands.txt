Auto Scaling Command Line Tools
===============================
http://aws.amazon.com/developertools/2535


Cloudwatch Command Line Tools
===============================
 http://aws.amazon.com/developertools/2534



Installation:
-------------

1. Ensure that JAVA version 1.5 or higher is installed on your system: (java -version)
2. Unzip the deployment zip file
3. Set the following environment variables:
3.1 AWS_AUTO_SCALING_HOME - The directory where the deployment files were copied to
        check with:
           Unix: ls ${AWS_AUTO_SCALING_HOME}/bin should list as-create-auto-scaling-group ...)
           Windows: dir "%AWS_AUTO_SCALING_HOME%\bin" should list as-create-auto-scaling-group ...)
3.2 JAVA_HOME - Java Installation home directory
4. Add ${AWS_AUTO_SCALING_HOME}/bin (in Windows: "%AWS_AUTO_SCALING_HOME%\bin") to your path

Configuration:
--------------

Provide the command line tool with your AWS user credentials.  There
are two ways you can provide credentails: AWS keys, or using X.509
certificates.

Using AWS Keys
--------------

1. Create a credential file: The deployment includes a template file ${AWS_AUTO_SCALING_HOME}/credential-file-path.template.
     Edit a copy of this file to add your information.
     On UNIX, limit permissions to the owner of the credential file: $ chmod 600 <the file created above>.
2. There are several ways to provide your credential information:
      a. Set the following environment variable: AWS_CREDENTIAL_FILE=<the file created in 1>
      b. Alternatively, provide the following option with every command --aws-credential-file <the file created in 1>
      c. Explicitly specify credentials on the command line: --I ACCESS_KEY --S SECRET_KEY
      
Using X.509 Certs
-----------------

1. Save your cetificate and private keys to files: e.g. my-cert.pem
and my-pk.pem.

2. There are two ways to provide the certificate information to the
command line tool
    a.  Set the following environment variables:
        EC2_CERT=/path/to/cert/file
        EC2_PRIVATE_KEY=/path/to/key/file
    b.  Specify the files directly on command-line for every command
        <command> --ec2-cert-file-path=/path/to/cert/file --ec2-private-key-file-path=/path/to/key/file

Running:
---------

1. To check that your setup works properly, run the following command:
   $ as-cmd --help
      You should see the usage page for all Auto Scaling commands

   $ as-describe-auto-scaling-groups --headers
      You should see a header line. If you have auto scaling groups
      already configured, you will see a description line for each
      auto scaling group


STEPS:

1. Create a Launch Configuration

• AMI ID:    ami-de2fcab6
• Instance type: t1.micro
  Create a loadbalancer with name mylb.
  Notification :  arn:aws:sns:us-east-1:441832771524:autoscale_alert
  
To create a launch configuration

1. as-create-launch-config lcmay25 --image-id ami-de2fcab6 --instance-type t1.micro --key cloudclass-new --region us-east-1  --group  sgcloudclass

2. as-create-auto-scaling-group sgpmay25 --launch-configuration lcmay25 --availability-zones us-east-1a --min-size 1 --max-size 3 --load-balancers mylb

3. as-describe-auto-scaling-groups   sgpmay25  --headers

AUTO-SCALING-GROUP  GROUP-NAME  LAUNCH-CONFIG  AVAILABILITY-ZONES  LOAD-BALANCERS  MIN-SIZE  MAX-SIZE  DESIRED-CAPACITY  TERMINATION-POLICIES
AUTO-SCALING-GROUP  MyGroup     MyLC           us-east-1a                          0         0         0                 Default
AUTO-SCALING-GROUP  sgpLCLB     MyLCLB         us-east-1a          mylb            1         4         1                 Default
INSTANCE  INSTANCE-ID  AVAILABILITY-ZONE  STATE    STATUS   LAUNCH-CONFIG
INSTANCE  i-69e73b06   us-east-1a         Pending  Healthy  MyLCLB
4. turn on email alert
as-put-notification-configuration  sgpmay25 --topic-arn arn:aws:sns:us-east-1:441832771524:autoscale_alert --notification-types autoscaling:EC2_INSTANCE_LAUNCH, autoscaling:EC2_INSTANCE_TERMINATE

output:OK-Put Notification Configuration

5.as-describe-auto-scaling-notification-types
NOTIFICATION-TYPE  autoscaling:EC2_INSTANCE_LAUNCH
NOTIFICATION-TYPE  autoscaling:EC2_INSTANCE_LAUNCH_ERROR
NOTIFICATION-TYPE  autoscaling:EC2_INSTANCE_TERMINATE
NOTIFICATION-TYPE  autoscaling:EC2_INSTANCE_TERMINATE_ERROR
NOTIFICATION-TYPE  autoscaling:TEST_NOTIFICATION

6. Create policies to scale-up and scale-down. if CPU utilization > 80% then autoscaling will create a new instance.

as-put-scaling-policy sgpCPUUPPolicymay25 --auto-scaling-group  sgpmay25  --adjustment=1 --type ChangeInCapacity --cooldown 60

Output:
arn:aws:autoscaling:us-east-1:441832771524:scalingPolicy:59078c12-0983-403b-bec6-252e5b080119:autoScalingGroupName/sgpmay25:policyName/sgpCPUUPPolicymay25

as-put-scaling-policy sgpCPUDOWNPolicymay25 --auto-scaling-group  sgpmay25 "--adjustment=-1" --type ChangeInCapacity --cooldown 60
Output:
arn:aws:autoscaling:us-east-1:441832771524:scalingPolicy:9369e1e9-00b5-4b41-a454-ff55986f5435:autoScalingGroupName/sgpmay25:policyName/sgpCPUDOWNPolicymsme


7. Bind Scale UP & DOWN policies with Cloudwatch Monitor

mon-put-metric-alarm  cloudCPUUTILhighmay25 --comparison-operator GreaterThanThreshold --evaluation-periods 1 --metric-name CPUUtilization --namespace "AWS/EC2" --period 60  --threshold 80 --alarm-actions "arn:aws:autoscaling:us-east-1:441832771524:scalingPolicy:59078c12-0983-403b-bec6-252e5b080119:autoScalingGroupName/sgpmay25:policyName/sgpCPUUPPolicymay25"  --dimensions  "AutoScalingGroupName= sgpmay25" --statistic Average --region us-east-1

Output: OK-Created Alarm

mon-put-metric-alarm  cloudCPUUTILlowmay25 --comparison-operator LessThanThreshold --evaluation-periods 1 --metric-name CPUUtilization --namespace "AWS/EC2" --period 60  --threshold 40 --alarm-actions "arn:aws:autoscaling:us-east-1:441832771524:scalingPolicy:9369e1e9-00b5-4b41-a454-ff55986f5435:autoScalingGroupName/sgpmay25:policyName/sgpCPUDOWNPolicymsme"  --dimensions  "AutoScalingGroupName= sgpmay25" --statistic Average --region us-east-1

LessThanThreshold
Output:OK-Created Alarm

8: mon-describe-alarms --region us-east-1
HighcloudCPUUTIL  OK     arn:aws:autoscalin...me/sgpcloudUPPolicy  AWS/EC2  CPUUtilization  120  Average  1  GreaterThanThreshold  80.0
LowcloudCPUUTIL   ALARM  arn:aws:autoscalin.../sgpcloudDOWNPolicy  AWS/EC2  CPUUtilization  120  Average  1  LessThanThreshold     40.0


9. Check auto scaling group . It has only one Instance now

as-describe-auto-scaling-groups  sgpmay25  --headers

Output:
AUTO-SCALING-GROUP  GROUP-NAME  LAUNCH-CONFIG  AVAILABILITY-ZONES  LOAD-BALANCERS  MIN-SIZE  MAX-SIZE  DESIRED-CAPACITY  TERMINATION-POLICIES
AUTO-SCALING-GROUP  sgpLCLBS    MyLCLBS        us-east-1a          mylb            1         4         1                 Default
INSTANCE  INSTANCE-ID  AVAILABILITY-ZONE  STATE      STATUS   LAUNCH-CONFIG
INSTANCE  i-6f26d400   us-east-1a         InService  Healthy  MyLCLBS



10: We can see that the instance is also connected to the Loadbalancer

11. We will connect to that instance using putty . Lets create a Load in the instance. You may download the stress utility from http://weather.ou.edu/~apw/projects/stress
wget http://weather.ou.edu/~apw/projects/stress/stress-1.0.4.tar.gz  or
wget http://pkgs.fedoraproject.org/repo/pkgs/stress/stress-1.0.4.tar.gz/a607afa695a511765b40993a64c6e2f4/stress-1.0.4.tar.gz
also see: http://linuxdrops.com/how-to-produce-high-cpu-load-memory-io-or-stress-test-a-linux-server/

tar xzf stress-1.0.4.tar.gz
cd  stress-1.0.4

if you are using amazon linux, install c++ compile 
for Amazon Lunix/Centos/redhat
yum install gcc gcc-c++ autoconf automake

For Ubuntu
$ sudo su -
# apt-get update
# apt-get install build-essential


./configure && make && sudo make install

to find stress: $whereis stress

To start stress run stress followed by the -c flag for load stress, -m for memory stress, -i for io and -d for HDD. For example to stress cpu execute

/usr/local/bin/stress --cpu 2 &
or
 /usr/local/bin/stress -c 5

else:
stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 10s


You will see new instances getting launched if CPU load > 80% and instances get shutdown once load is < 40%. However the minimum no. of instances will be always met.
 Pausing and Restarting autoscaling activities

Maintenance:

as-suspend-processes <auto-scaling-group-name>
as-resume-processes <auto-scaling-group-name>

Expand to other Availability Zones

as-update-auto-scaling-group <auto-scaling-group-name> --availability-zones us-east-1a, us-east-1b, us-east-1c --min-size 3
elb-describe-instance-health  <Load-balancer-name>
elb-enable-zones-for-lb  <Load-balancer-name>  --headers --availability-zones us-east-1c 

Clean up

as-update-auto-scaling-group <auto-scaling-group-name> --min-size 0 --max-size 0

as-update-auto-scaling-group sgpmay25 --min-size 0 --max-size 0


as-delete-auto-scaling-group <auto-scaling-group-name>
as-delete-launch-config <Launch configuration-name>
 
mon-delete-alarms $HIGH_CPU_ALRM_NAME $LOW_CPU_ALRM_NAME


